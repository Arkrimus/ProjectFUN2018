class EnemyBasherBehavior : ZilchComponent
{
  [Dependency] var ObjectLink : ObjectLink;
  [Dependency] var RigidBody : RigidBody;
  [Dependency] var DragEffect : DragEffect;
  [Dependency] var Transform : Transform;
  [Dependency] var ForceEffect : ForceEffect;
  
  [Property] var HitPoints : Real = 10;
  
  sends EnemyKilled : ZilchEvent;
  
  var PlayerDead : Boolean = false;
  var Angle : Real;
  var PlayerDimension : Real = 1;
  var OriginalColors : Real4;
  
  function Initialize(init : CogInitializer)
  {
    this.OriginalColors = this.Owner.Sprite.VertexColor;
    Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
    Zero.Connect(this.Space, Events.ChangeDimension, this.ChangeDimension);
    Zero.Connect(this.Space, Events.PlayerDeath, this.PlayerDeath);

    Zero.Connect(this.Owner, Events.CollisionStarted, this.OnCollisionStarted);
  }

  function OnLogicUpdate(event : UpdateEvent)
  {
    if (this.PlayerDimension == 1 && this.PlayerDead == false){
      this.Owner.ForceEffect.Active = true;
      this.Owner.Transform.Translation = Real3(this.Owner.Transform.Translation.XY, 1);
      this.Owner.RigidBody.RotationLocked = false;
      this.Rotate();
    } else {
      this.Owner.ForceEffect.Active = false;
      this.Owner.Transform.Translation = Real3(this.Owner.Transform.Translation.XY, -2);
      this.Owner.RigidBody.RotationLocked = true;
    }
    
    
    
    if (this.PlayerDead == true){
      this.Owner.DragEffect.LinearDamping = 10;
      this.Owner.DragEffect.AngularDamping = 10;
    }
    
    
  }
  
  
  function DamageFeedback(){
    var seq = Actions.Sequence(this.Owner.Actions);
    Actions.Property(seq, @this.Owner.Sprite.VertexColor, Real4(1,0,1,1), 0.05, Ease.Linear);
    Actions.Property(seq, @this.Owner.Sprite.VertexColor, this.OriginalColors, 0.05, Ease.Linear);
  }
  
  function Rotate()
  {
    var targetVector = this.ObjectLink.WorldPointB - this.ObjectLink.WorldPointA;
    this.Angle = Math.Angle2D(targetVector);
    this.Owner.Transform.Rotation = Math.ToQuaternion(Real3(0,0,this.Angle-Math.Pi/2));
  }
  
  
  function OnCollisionStarted(event : CollisionEvent)
  {
    
    if (event.OtherObject.Archetype == Archetype.PlayerBullet){
      this.HitPoints -= 1;
      this.DamageFeedback();
      if (this.HitPoints == 0){
        this.Space.DispatchEvent(Events.EnemyKilled, ZilchEvent());
        this.Space.CreateAtPosition(Archetype.Explosion, this.Transform.WorldTranslation);
        this.Owner.Destroy();
      }
    }
  }
  

  
  function PlayerDeath(event : ZilchEvent)
  {
    this.PlayerDead = true;
  }
  
  
  function ChangeDimension(event : DimensionEvent)
  {
    this.PlayerDimension = event.Dimension;
    this.DimensionalHandling(event.Dimension);
  }
  
  function DimensionalHandling(dimension : Real){
    if (dimension == 1){
      Action.Property(this.Owner.Actions, @this.Owner.Sprite.VertexColor, this.OriginalColors, 0.1, Ease.Linear);
    } else {
      Action.Property(this.Owner.Actions, @this.Owner.Sprite.VertexColor, Real4(0,0,0,1), 0.1, Ease.Linear);
    }
  }
}

